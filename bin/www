#!/usr/bin/env node

"use strict";

if (process.env.LOAD_ENV) {
	require('dotenv').config();
}

if (process.env.IS_HEROKU) {
	require('../heroku-setup');
}

/**
 * Module dependencies.
 */

const app    = require('../app');
const _      = require('lodash');
const debug  = require('debug')('xword:server');
const http   = require('http');
const https  = require('https');
const URL    = require('url');
const fs     = require('fs');
const config = require('../lib/utils/config');


/**
 * Get port from environment and store in Express.
 */

console.log('config.app.address: ', JSON.stringify(config.app.address, null, '\t'));
var port = normalizePort(config.app.address.PORT || '8989');
app.set('port', port);

console.log('port: ', port);
// console.log('config: ', JSON.stringify(config, null, '\t'));

/**
 * Create HTTP server.
 */

var server;


if (config.app.address.isSecure) {
	server = https.createServer(
		{
			key: config.ssl.key,
			cert: config.ssl.cert,
		},
		app
	);

	if (config.app.address.insecurePort) {
		let insecurePort = normalizePort(config.app.address.insecurePort);

		let insecureServer = http.createServer(
			function(req, res) {
				res.writeHead(301, {
					"Location": URL.format({
						protocol: 'https',
						hostname: req.headers.host.split(':')[0],
						port: port,
						pathname: req.url
					})
				});
				res.end();
			}
		).listen(insecurePort);

		insecureServer.on('error', function(error) {
			debug('error in insecure server:\n');
			onError(error);
		});

		insecureServer.on('listening', function() {
			debug('insecure server listening on port ' + insecureServer.address().port);
		});
	}
}
else {
	server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ?
		'Pipe ' + port :
		'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ?
		'pipe ' + addr :
		'port ' + addr.port;
	debug('Listening on ' + bind);
}
